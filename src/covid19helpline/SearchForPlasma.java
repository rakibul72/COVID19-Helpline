/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package covid19helpline;

import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import java.sql.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author USER
 */
public class SearchForPlasma extends javax.swing.JFrame {

    /**
     * Creates new form SearchForPlasma
     */
    
    String usid;
    public SearchForPlasma() {
        initComponents();
    }
    
    public SearchForPlasma(String msg) {
        initComponents();
        usid=msg;
        
         try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection connection = DriverManager.getConnection(
                    "jdbc:sqlserver://localhost:1433;databaseName=COVID19 Helpline;selectMethod=cursor", "sa", "123456");

            System.out.println("DATABASE NAME IS:" + connection.getMetaData().getDatabaseProductName());

            Statement statement = connection.createStatement();
            ResultSet resultSet = statement
                    .executeQuery("select distinct(UserAddress) from Userr");
            
 
           
          
            int cnt=0;
            
             
            while (resultSet.next()) {

       
                
              String UserAddress = resultSet.getString("UserAddress");
                
                
               chooseaddress.addItem(UserAddress);

                
            }
            
            
           
            

        } catch (Exception e) {
            e.printStackTrace();
        }
        
         
         
         
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        infotable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        choosebg = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        searchButton = new javax.swing.JButton();
        updateavaLabel = new javax.swing.JLabel();
        backButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        donoridTextfield = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        messageTextarea = new javax.swing.JTextArea();
        sendButton = new javax.swing.JButton();
        chooseaddress = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 204, 255));
        jLabel1.setText("SearchForPlasma");

        infotable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Blood Group", "Address", "Mobile No.", "Plasma Availability"
            }
        ));
        jScrollPane1.setViewportView(infotable);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Search By Blood Group:");

        choosebg.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "A+", "B+", "O+", "AB+", "A-", "B-", "O-", "AB-" }));
        choosebg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                choosebgActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Search By Address:");

        searchButton.setBackground(new java.awt.Color(51, 255, 51));
        searchButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        updateavaLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        updateavaLabel.setForeground(new java.awt.Color(0, 51, 255));
        updateavaLabel.setText("Update your Donation Status");
        updateavaLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                updateavaLabelMouseClicked(evt);
            }
        });

        backButton.setBackground(new java.awt.Color(255, 51, 51));
        backButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(51, 204, 0));
        jLabel4.setText("Send Request For Plasma");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Enter Plasma Donor ID:");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("Enter Message:");

        messageTextarea.setColumns(20);
        messageTextarea.setRows(5);
        jScrollPane2.setViewportView(messageTextarea);

        sendButton.setBackground(new java.awt.Color(0, 204, 255));
        sendButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        sendButton.setText("Send");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        chooseaddress.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 639, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(choosebg, 0, 214, Short.MAX_VALUE)
                                            .addComponent(updateavaLabel)
                                            .addComponent(chooseaddress, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jLabel4)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel6)
                                            .addGap(130, 130, 130)
                                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel5)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(donoridTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(0, 84, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(206, 206, 206))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(253, 253, 253))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(backButton)
                                .addGap(40, 40, 40))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(sendButton)
                                .addGap(270, 270, 270))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(choosebg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(chooseaddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(searchButton)
                .addGap(18, 18, 18)
                .addComponent(updateavaLabel)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(donoridTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(sendButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(backButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public Connection connection;
    
                             
    
    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        dashboard ob = new dashboard(usid);
        ob.setVisible(true);
        dispose();
    }//GEN-LAST:event_backButtonActionPerformed

    

    
    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed

        String address = (String) chooseaddress.getSelectedItem();
        String bloodgroup = (String) choosebg.getSelectedItem();
        
        
       
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            connection = DriverManager.getConnection(
                    "jdbc:sqlserver://localhost:1433;databaseName=COVID19 Helpline;selectMethod=cursor", "sa", "123456");

            System.out.println("DATABASE NAME IS:" + connection.getMetaData().getDatabaseProductName());

            Statement statement = connection.createStatement();
            ResultSet resultSet;
            
            //System.out.println(address + bloodgroup);
            if(address.equals("All"))
            {
                 if(bloodgroup.equals("All"))
                 {
                     
                    resultSet = statement.executeQuery("SELECT Userr.UserId,UserName,UserAddress,UserBloodGroup,UserMobileNo,UserRecoveryDate,UserCovidStatus,DonationStatus FROM Userr JOIN Plasma ON Userr.Userid = Plasma.UserID and Userr.Userid!='"+usid+"'");
                 }
                 else
                 {
                     resultSet = statement.executeQuery("SELECT Userr.UserId,UserName,UserAddress,UserBloodGroup,UserMobileNo,UserRecoveryDate,UserCovidStatus,DonationStatus FROM Userr JOIN Plasma ON Userr.Userid = Plasma.UserID WHERE UserBloodGroup = '" + bloodgroup + "' and Userr.Userid!='"+usid+"'");
                 }
            }
            else
            {
                if(bloodgroup.equals("All"))
                 {
                    resultSet = statement.executeQuery("SELECT Userr.UserId,UserName,UserAddress,UserBloodGroup,UserMobileNo,UserRecoveryDate,UserCovidStatus,DonationStatus FROM Userr JOIN Plasma ON Userr.Userid = Plasma.UserID WHERE UserAddress = '" + address + "' and Userr.Userid!='"+usid+"'");
                 }
                 else
                 {
                     resultSet = statement.executeQuery("SELECT Userr.UserId,UserName,UserAddress,UserBloodGroup,UserMobileNo,UserRecoveryDate,UserCovidStatus,DonationStatus FROM Userr JOIN Plasma ON Userr.Userid = Plasma.UserID WHERE UserBloodGroup = '" + bloodgroup + "' AND UserAddress = '" + address + "' and Userr.Userid!='"+usid+"'");
                 }
            }
            
             DefaultTableModel model = (DefaultTableModel) infotable.getModel();
             model.setRowCount(0);
             while (resultSet.next()) {

                 //System.out.println("!@!@");
                String id = resultSet.getString("UserId");
                String name = resultSet.getString("UserName");
                String add= resultSet.getString("UserAddress");
                String bg = resultSet.getString("UserBloodGroup");
                String mobile = resultSet.getString("UserMobileNo");
                String recoverdate = resultSet.getString("UserRecoveryDate");
                String Cstatus = resultSet.getString("UserCovidStatus");
                String Dstatus = resultSet.getString("DonationStatus");
                String availability;
                
                 //System.out.println(Dstatus);
                if(Dstatus.equals("No"))
                    availability="No";
                else if(Cstatus.equals("Not Affected")){
                   availability="No";
                }
                else{
                    DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd");  
                    LocalDateTime now = LocalDateTime.now();  
                    //System.out.println(dtf.format(now));
                    availability="Yes";
                   // System.out.println(recoverdate);
                   
                    /*LocalDateTime before = LocalDateTime.now();
                    try{
                        
                     before = LocalDateTime.parse(recoverdate+" ");
                     
                     System.out.println(dtf.format(before));
            
                    
                    }catch(Exception e){
                        System.out.println(e);
                        
                    }*/
                    
                   //System.out.println(dtf.format(before));
                   //long days = ChronoUnit.DAYS.between(before, now);
                   //System.out.println(days);
                   
                   String curr = now.format(dtf);
                   
                   long years1 , years2, months1 , months2 , days1 , days2 ,duration;
                   
                   years1=0;
                   try{
                   years1=(years1*10)+Integer.parseInt(curr.substring(0,1));
                   }catch(Exception e){
                       System.out.println(e);
                   }
                   try{
                   years1=(years1*10)+Integer.parseInt(curr.substring(1,2));
                   }catch(Exception e){
                       System.out.println(e);
                   }
                   try{
                   years1=(years1*10)+Integer.parseInt(curr.substring(2,3));
                   }catch(Exception e){
                       System.out.println(e);
                   }
                   try{
                   years1=(years1*10)+Integer.parseInt(curr.substring(3,4));
                   }catch(Exception e){
                       System.out.println(e);
                   }
                   
                   months1=0;
                   try{
                   months1=(months1*10)+Integer.parseInt(curr.substring(5,6));
                   }catch(Exception e){
                       System.out.println(e);
                   }
                   try{
                   months1=(months1*10)+Integer.parseInt(curr.substring(6,7));
                   }catch(Exception e){
                       System.out.println(e);
                   }
                   
                   days1=0;
                   try{
                   days1=(days1*10)+Integer.parseInt(curr.substring(8,9));
                   }catch(Exception e){
                       System.out.println(e);
                   }
                   try{
                   days1=(days1*10)+Integer.parseInt(curr.substring(9,10));
                   }catch(Exception e){
                       System.out.println(e);
                   }
                   
                   years2=0;
                   try{
                   years2=(years2*10)+Integer.parseInt(recoverdate.substring(0,1));
                   }catch(Exception e){
                       System.out.println(e);
                   }
                   try{
                   years2=(years2*10)+Integer.parseInt(recoverdate.substring(1,2));
                   }catch(Exception e){
                       System.out.println(e);
                   }
                   try{
                   years2=(years2*10)+Integer.parseInt(recoverdate.substring(2,3));
                   }catch(Exception e){
                       System.out.println(e);
                   }
                   try{
                   years2=(years2*10)+Integer.parseInt(recoverdate.substring(3,4));
                   }catch(Exception e){
                       System.out.println(e);
                   }
                   
                   months2=0;
                   try{
                   months2=(months2*10)+Integer.parseInt(recoverdate.substring(5,6));
                   }catch(Exception e){
                       System.out.println(e);
                   }
                   try{
                   months2=(months2*10)+Integer.parseInt(recoverdate.substring(6,7));
                   }catch(Exception e){
                       System.out.println(e);
                   }
                   
                   days2=0;
                   try{
                   days2=(days2*10)+Integer.parseInt(recoverdate.substring(8,9));
                   }catch(Exception e){
                       System.out.println(e);
                   }
                   try{
                   days2=(days2*10)+Integer.parseInt(recoverdate.substring(9,10));
                   }catch(Exception e){
                       System.out.println(e);
                   }
                   //System.out.println(curr+recoverdate+days);
                   
                   duration = (years1-years2)*365;
                    
                   duration += ((months1-months2)*30);
                                 
                   duration+=((days1-days2));
                   
                   // System.out.println(curr+recoverdate+duration);
                   if(duration<=60){
                       availability="Yes";
                   }
                   else{
                       availability="No";
                   }
                   
                 
                }                
               
                //System.out.println(name+bg+mobile+recoverdate+Dstatus+availability);
                
               
                String tbData[] = {id , name , bg, add , mobile , availability};
                DefaultTableModel tblModel = (DefaultTableModel) infotable.getModel();

                tblModel.addRow(tbData);
                
                //String q="UPDATE Plasma SET AvailableForDonation = '" + availability + "' WHERE UserID = " + Integer.parseInt(id) + "";
                 //System.out.println(q);
                //statement.executeQuery(q);
                
            }
                
               
            connection.close();
        } catch (SQLException ex) {
            Logger.getLogger(SignUp.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(SignUp.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        
        
    }//GEN-LAST:event_searchButtonActionPerformed

    private void updateavaLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateavaLabelMouseClicked
       try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            connection = DriverManager.getConnection(
                    "jdbc:sqlserver://localhost:1433;databaseName=COVID19 Helpline;selectMethod=cursor", "sa", "123456");

            System.out.println("DATABASE NAME IS:" + connection.getMetaData().getDatabaseProductName());

            Statement statement = connection.createStatement();
            //System.out.println(usid);
            ResultSet resultSet = statement.executeQuery("SELECT UserCovidStatus FROM Userr WHERE Userr.UserId = " + usid + "");
            resultSet.next();
            String stat = resultSet.getString("UserCovidStatus");
                          
             //System.out.println(stat);
             if(stat.equals("Affected"))
             {
                 DonationStatus obj = new DonationStatus(usid);
                 obj.setVisible(true);
                 dispose();
             }
             else
             {
                JOptionPane.showMessageDialog(this, "You are not Affected!"); 
             }

            connection.close();
        } catch (SQLException ex) {
            Logger.getLogger(SignUp.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(SignUp.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_updateavaLabelMouseClicked

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        String donorid = donoridTextfield.getText();
        String message = messageTextarea.getText();
        
       
        int cnt=0;
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            connection = DriverManager.getConnection(
                    "jdbc:sqlserver://localhost:1433;databaseName=COVID19 Helpline;selectMethod=cursor", "sa", "123456");

            System.out.println("DATABASE NAME IS:" + connection.getMetaData().getDatabaseProductName());

            

            Statement statement = connection.createStatement();
           ResultSet resultSet = statement.executeQuery("SELECT * FROM MessageTable");

            while (resultSet.next()) {
                    cnt++;
            }

            JOptionPane.showMessageDialog(this, "Message Sent!");
            cnt++;
            //System.out.println(cnt);
            String id = Integer.toString(cnt);
               
               
            statement.executeQuery("INSERT INTO MessageTable(MessageID, SenderID , RecieverID, Messagess) VALUES ( " + cnt + " , '" + usid + "' , '" + donorid + "' , '" + message + "' )");
                
                
            

            connection.close();
        } catch (SQLException ex) {
            Logger.getLogger(SignUp.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(SignUp.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
         donoridTextfield.setText("");
        messageTextarea.setText("");
        
    }//GEN-LAST:event_sendButtonActionPerformed

    private void choosebgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_choosebgActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_choosebgActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SearchForPlasma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SearchForPlasma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SearchForPlasma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SearchForPlasma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SearchForPlasma().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JComboBox<String> chooseaddress;
    private javax.swing.JComboBox<String> choosebg;
    private javax.swing.JTextField donoridTextfield;
    private javax.swing.JTable infotable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea messageTextarea;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton sendButton;
    private javax.swing.JLabel updateavaLabel;
    // End of variables declaration//GEN-END:variables
}
